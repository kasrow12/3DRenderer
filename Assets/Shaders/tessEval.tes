#version 400 core
layout (quads, equal_spacing, cw) in;

in vec3 tcFragPos[];
out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoords;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

// Bernstein polynomial basis functions
float B0(float t) { return (1.0-t)*(1.0-t)*(1.0-t); }
float B1(float t) { return 3.0*t*(1.0-t)*(1.0-t); }
float B2(float t) { return 3.0*t*t*(1.0-t); }
float B3(float t) { return t*t*t; }

// Derivatives of Bernstein polynomials
float dB0(float t) { return -3.0*(1.0-t)*(1.0-t); }
float dB1(float t) { return 3.0*(1.0-t)*(1.0-3.0*t); }
float dB2(float t) { return 3.0*t*(2.0-3.0*t); }
float dB3(float t) { return 3.0*t*t; }

vec3 calculateBezierPoint(vec2 uv)
{
    float u = uv.x;
    float v = uv.y;
    vec3 point = vec3(0.0);
    
    float blend_u[4] = float[](B0(u), B1(u), B2(u), B3(u));
    float blend_v[4] = float[](B0(v), B1(v), B2(v), B3(v));
    
    for (int i = 0; i < 4; i++) 
    {
        for (int j = 0; j < 4; j++) 
        {
            point += tcFragPos[i * 4 + j] * blend_u[i] * blend_v[j];
        }
    }

    return point;
}

vec3 calculateDU(vec2 uv) 
{
    float u = uv.x;
    float v = uv.y;
    vec3 du = vec3(0.0);
    
    float dblend_u[4] = float[](dB0(u), dB1(u), dB2(u), dB3(u));
    float blend_v[4] = float[](B0(v), B1(v), B2(v), B3(v));
    
    for(int i = 0; i < 4; ++i) 
    {
        for(int j = 0; j < 4; ++j)
        {
            du += tcFragPos[i * 4 + j] * dblend_u[i] * blend_v[j];
        }
    }

    return du;
}

vec3 calculateDV(vec2 uv) 
{
    float u = uv.x;
    float v = uv.y;
    vec3 dv = vec3(0.0);
    
    float blend_u[4] = float[](B0(u), B1(u), B2(u), B3(u));
    float dblend_v[4] = float[](dB0(v), dB1(v), dB2(v), dB3(v));
    
    for(int i = 0; i < 4; ++i)
    {
        for(int j = 0; j < 4; ++j) 
        {
            dv += tcFragPos[i * 4 + j] * blend_u[i] * dblend_v[j];
        }
    }

    return dv;
}

void main() 
{
    vec2 uv = gl_TessCoord.xy;
    FragPos = calculateBezierPoint(uv);
    
    vec3 du = calculateDU(uv);
    vec3 dv = calculateDV(uv);
    
    Normal = mat3(transpose(inverse(model))) * normalize(cross(du, dv));
    
    TexCoords = uv;
    gl_Position = projection * view * vec4(FragPos, 1.0);
}